% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Arranging_Plots_Nicely.R
\name{Arranging_Plots_Nicely}
\alias{Arranging_Plots_Nicely}
\title{Arranging Plots Nicely}
\usage{
Arranging_Plots_Nicely(
  Number_of_Plots,
  Arrangement_Option = c("Wide", "Tall"),
  Row_for_Plot_Title = TRUE,
  Row_for_Plot_Legend = TRUE
)
}
\arguments{
\item{Number_of_Plots}{the number of plots to be arranged.}

\item{Arrangement_Option}{whether a slightly wider or a slightly taller arrangement should be favored. Possibilities for this argument include "Wide" and "Tall", with "Wide" being the default. This argument is only truly relevant if the numbers of rows and columns of the plot layout matrix differ by \code{1} - if the number of rows and the number of columns are equal, this argument has no bearing on the output.}

\item{Row_for_Plot_Title}{a logical argument indicating whether an extra row (an extra plot) should be included at the top of the figure for a figure title. By default, this extra row is included.}

\item{Row_for_Plot_Legend}{a logical argument indicating whether an extra row (an extra plot) should be included at the bottom of the figure for a legend. By default, this extra row is included.}
}
\value{
This function returns a plot layout matrix.
}
\description{
This function generates a plot layout matrix that is as square as possible - in other words, it generates a plot layout matrix whose number of rows and number of columns differ by either \code{0} (if possible) or \code{1} (as a last resort).
}
\details{
\code{Arranging_Plots_Nicely} generates a plot layout matrix that is as square as possible - in other words, it generates a plot layout matrix whose number of rows and number of columns differ by either \code{0} (if possible) or \code{1} (as a last resort). This function works best when each individual plot in the figure is desired to be equal in size and in importance.
}
\examples{
# Use a Subset of the 'mtcars' Data Frame
?mtcars
Data_Frame <- mtcars[, which(colnames(mtcars) != "vs")]

# Generate the Layout Matrix
(Layout_Matrix <- DBM.functions::Arranging_Plots_Nicely(Number_of_Plots = (ncol(mtcars) - 3), Arrangement_Option = "Tall"))

# Make the Figure
jpeg("Example Plot.jpeg", height = 1000, width = 1000)
layout(Layout_Matrix, heights = c(1, rep(exp(1), (nrow(Layout_Matrix) - 2)), 1))
par(mar = c(1, 1, 5, 1))
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "", main = "\nPlotting the 'mpg' Column Against Other Columns From the 'mtcars' Data Frame", cex.main = 2.5)
par(mar = c(5, 4, 2, 2) + 0.1)
lapply(seq_len(ncol(Data_Frame) - 2), function (x) {
  plot(Data_Frame$mpg ~ Data_Frame[, which(!(colnames(Data_Frame) \%in\% c("mpg", "am")))[x]], xlab = colnames(Data_Frame)[which(!(colnames(Data_Frame) \%in\% c("mpg", "am")))[x]], ylab = "mpg", type = "n")
  lapply(seq_len(length(unique(Data_Frame$am))), function (y) {
    points(Data_Frame[which(Data_Frame$am == unique(Data_Frame$am)[y]), ]$mpg ~ Data_Frame[which(Data_Frame$am == unique(Data_Frame$am)[y]), which(!(colnames(Data_Frame) \%in\% c("mpg", "am")))[x]], pch = 19, col = y)
  })
})
par(mar = c(1, 1, 1, 1))
plot(0, type = "n", axes = FALSE, xlab = "", ylab = "")
legend("top", horiz = TRUE, title = expression(paste(bold("'am' Column Value"))), legend = unique(Data_Frame$am), col = 1:2, pch = 19)
dev.off()

}
\author{
David B. Moore (\email{davidblakneymoore@gmail.com})
}
